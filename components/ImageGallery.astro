---
import { Image } from 'astro:assets';
const imagePaths = Object.keys(import.meta.glob('src/assets/gallery/*.jpg'));
console.log(imagePaths);
---

<div class="flex justify-center m-5">
  <h1 class="text-2xl font-bold tracking-tight dark:text-white sm:text-3xl">Our Pictures</h1>
</div>
<div class="grid gap-1.5 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
  {
    imagePaths.map((imagePath, index) => (
      <Image
        src={imagePath}
        width="800"
        height="800"
        alt={`Picture Number ${index}`}
        class="object-cover lg:grayscale lg:hover:scale-95 lg:hover:grayscale-0 transition-all duration-700 ease-in-out"
      />
    ))
  }
  <div id="IMAGE_CONTAINER" class="z-30 w-screen h-screen bg-black bg-opacity-60 fixed top-0 hidden px-8">
    <img id="BIG_IMAGE" src="" class="md:h-4/5 md:w-auto z-50 rounded-2xl mt-6" />
  </div>
</div>

<script lang="ts">
  const images = document.querySelectorAll('img');
  const imageContainer = document.getElementById('IMAGE_CONTAINER');

  if (imageContainer) {
    imageContainer.addEventListener('click', () => {
      hideBigImage();
    });
  }

  images.forEach((img) => {
    if (img.id !== 'BIG_IMAGE') {
      img.addEventListener('click', () => {
        showBigImage(img.src);
      });
    }
  });

  function showBigImage(imageLink) {
    const imageContainer = document.getElementById('IMAGE_CONTAINER');
    const bigImage = document.getElementById('BIG_IMAGE');

    bigImage.src = imageLink;
    imageContainer.classList.add('flex', 'justify-center', 'items-center');
    imageContainer.classList.remove('hidden');
  }

  function hideBigImage() {
    const imageContainer = document.getElementById('IMAGE_CONTAINER');
    const bigImage = document.getElementById('BIG_IMAGE');

    imageContainer.classList.remove('flex', 'justify-center', 'items-center');
    imageContainer.classList.add('hidden');

    bigImage.src = '';
  }

  const callback = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.remove('grayscale');
      } else {
        entry.target.classList.add('grayscale');
      }
    });
  };

  const options = {
    root: null,
    threshold: 1,
  };

  const observer = new IntersectionObserver(callback, options);

  images.forEach((img) => {
    if (img.id !== 'BIG_IMAGE') {
      observer.observe(img);
    }
  });
</script>
